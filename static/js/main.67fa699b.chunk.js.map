{"version":3,"sources":["components/Checkbox.js","components/TodoItem.js","todosData.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","props","className","type","checked","onChange","handleChange","id","xmlns","viewBox","aria-hidden","focusable","fill","stroke","strokeWidth","d","TodoItem","itemStyle","data","completed","text","onClick","handleClick","todosData","App","todos","setTodos","useState","newTask","setNewTask","todoList","map","todo","prevTodos","filter","updateTodos","value","placeholder","event","target","onKeyPress","nextId","length","console","log","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KA6BeA,MAvBf,SAAkBC,GACd,OACI,uBAAMC,UAAU,kBAAhB,UACI,uBAAOC,KAAK,WACRC,QAASH,EAAMG,QACfC,SAAY,IAAMJ,EAAMK,aAAaL,EAAMM,MAC/C,qBACIC,MAAM,6BACNC,QAAQ,YACRC,cAAY,OACZC,UAAU,QAJd,SAMI,sBACAC,KAAK,OACLC,OAAO,eACPC,YAAY,IACZC,EAAE,2CCFHC,MAjBf,SAAkBf,GACd,MAAMgB,EAAYhB,EAAMiB,KAAKC,UAAY,iBAAmB,YAC5D,OACI,sBAAKjB,UAAWe,EAAhB,UACI,cAAC,EAAD,CACIb,QAASH,EAAMiB,KAAKC,UACpBb,aAAgBL,EAAMK,aACtBC,GAAMN,EAAMiB,KAAKX,KACrB,4BAAIN,EAAMiB,KAAKE,OACf,wBACIC,QAAS,IAAMpB,EAAMqB,YAAYrB,EAAMiB,KAAKX,IADhD,mBCgBGgB,EA5BG,CACd,CACIhB,GAAI,EACJa,KAAM,qBACND,WAAW,GAEf,CACIZ,GAAI,EACJa,KAAM,mBACND,WAAW,GAEf,CACIZ,GAAI,EACJa,KAAM,mBACND,WAAW,GAEf,CACIZ,GAAI,EACJa,KAAM,WACND,WAAW,GAEf,CACIZ,GAAI,EACJa,KAAM,mCACND,WAAW,ICgDJK,MAnEf,WACE,MAAQC,EAAOC,GAAaC,mBAASJ,IAC7BK,EAASC,GAAeF,qBAC1BG,EAAWL,EAAMM,KAAIC,GACzB,cAAC,EAAD,CAEEd,KAAMc,EACN1B,aAAcA,EACdgB,YAAaA,GAHRU,EAAKzB,MAMd,SAASe,EAAYf,GACnBmB,GAASO,GAAaA,EAAUC,QAAOF,GAAQA,EAAKzB,KAAOA,MAK7D,SAASD,EAAaC,GACpBmB,GAASO,IAUA,CACLE,YAVkBF,EAAUF,KAAIC,GAC1BA,EAAKzB,KAAOA,EACP,IACFyB,EACHb,WAAaa,EAAKb,WAENa,QA0BtB,OACE,sBAAK9B,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,uBACC4B,EACD,uBACE5B,UAAU,WACVC,KAAK,OACLiC,MAAOR,EACPS,YAAY,0BACZhC,SA7CR,SAAuBiC,GAAQT,EAAWS,EAAMC,OAAOH,QA8C/CI,WA3BR,SAAoBF,GAClB,MAAMG,EAAShB,EAAMiB,OAAS,EAC9BC,QAAQC,IAAInB,EAAMiB,QACA,UAAdJ,EAAMO,MACRnB,GAASO,GAMA,IAAIA,EALK,CACd1B,GAAKkC,EACLrB,KAAOkB,EAAMC,OAAOH,MACpBjB,WAAY,MAKhBU,EAAW,YCxCFiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.67fa699b.chunk.js","sourcesContent":["import React from 'react'\n\n// creates a link that looks like a button\n// when clicked, it will open a new tab\n// props must contain a url (href) and the button text (text)\n\nfunction Checkbox(props) {\n    return (\n        <span className=\"checkbox__input\">\n            <input type=\"checkbox\" \n                checked={props.checked}\n                onChange = {() => props.handleChange(props.id)} />\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                aria-hidden=\"true\"\n                focusable=\"false\"\n            >\n                <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"3\"\n                d=\"M1.73 12.91l6.37 6.37L22.79 4.59\"\n                />\n            </svg>\n        </span>\n    )\n}\n\nexport default Checkbox","import React from \"react\"\nimport Checkbox from './Checkbox'\n\nfunction TodoItem(props) {\n    const itemStyle = props.data.completed ? \"completed-item\" : \"todo-item\"\n    return (\n        <div className={itemStyle}>\n            <Checkbox \n                checked={props.data.completed}\n                handleChange = {props.handleChange}\n                id = {props.data.id} />\n            <p>{props.data.text}</p>\n            <button \n                onClick={() => props.handleClick(props.data.id)}\n            >X</button>\n        </div>\n\n    )\n}\n \nexport default TodoItem","const todosData = [\n    {\n        id: 1,\n        text: \"Take out the trash\",\n        completed: true\n    },\n    {\n        id: 2,\n        text: \"Grocery shopping\",\n        completed: false\n    },\n    {\n        id: 3,\n        text: \"Clean gecko tank\",\n        completed: false\n    },\n    {\n        id: 4,\n        text: \"Mow lawn\",\n        completed: true\n    },\n    {\n        id: 5,\n        text: \"Catch up on Arrested Development\",\n        completed: false\n    }\n]\n\nexport default todosData","import React, { useState } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem'\nimport todosData from './todosData'\n\nfunction App() {\n  const [ todos, setTodos ] = useState(todosData)\n  const [ newTask, setNewTask ] = useState()\n  const todoList = todos.map(todo => \n    <TodoItem \n      key={todo.id} \n      data={todo} \n      handleChange={handleChange} \n      handleClick={handleClick}\n    />)\n  \n  function handleClick(id) {\n    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== id))\n  }\n\n  function updateNewTask(event) {setNewTask(event.target.value)}\n\n  function handleChange(id) {\n    setTodos(prevTodos => {\n      const updateTodos = prevTodos.map(todo => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed : !todo.completed\n            }\n          } else { return todo }\n          \n      })\n      return {\n        updateTodos\n      }\n    })\n  }\n\n  function addNewTask(event) {\n    const nextId = todos.length + 1\n    console.log(todos.length)\n    if (event.key === 'Enter') {\n      setTodos(prevTodos => {\n        const newTodo = {\n          id : nextId,\n          text : event.target.value,\n          completed : false\n        }\n        return [...prevTodos, newTodo]\n        }\n      )\n      setNewTask('')\n    }\n  }\n\n    return (\n      <div className=\"todo-list\">\n        <h1 className=\"App-header\">Todo List</h1>\n        {todoList}\n        <input \n          className='new-task'\n          type='text'\n          value={newTask}\n          placeholder='what do you want to do?'\n          onChange={updateNewTask}\n          onKeyPress={addNewTask}\n          /> \n      </div>\n      )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}