{"version":3,"sources":["components/Checkbox.js","components/TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","props","className","type","checked","onChange","handleChange","id","xmlns","viewBox","aria-hidden","focusable","fill","stroke","strokeWidth","d","TodoItem","inputRef","useRef","itemStyle","data","completed","useEffect","current","edit","focus","onClick","handleEditTask","hidden","text","onClickOutside","e","onOutsideClick","ref","aid","value","placeholder","handleUpdate","onKeyDown","saveTask","handleClick","App","origTodos","JSON","parse","localStorage","getItem","todos","setTodos","useState","lastTaskId","setLastTaskId","length","at","newTask","setNewTask","todoList","map","todo","removeTask","editTask","updateTask","clickOutsideTask","updateTaskState","condition","outputOnTrue","outputOnFalse","prevTodos","updateTodos","setItem","stringify","newTodos","filter","console","log","event","target","task","key","onKeyPress","nextId","newTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fca725bb.chunk.js","sourcesContent":["import React from 'react'\n\n// creates a link that looks like a button\n// when clicked, it will open a new tab\n// props must contain a url (href) and the button text (text)\n\nfunction Checkbox(props) {\n    return (\n        <span className=\"checkbox__input\">\n            <input type=\"checkbox\" \n                checked={props.checked}\n                onChange = {() => props.handleChange(props.id)} />\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                aria-hidden=\"true\"\n                focusable=\"false\"\n            >\n                <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"3\"\n                d=\"M1.73 12.91l6.37 6.37L22.79 4.59\"\n                />\n            </svg>\n        </span>\n    )\n}\n\nexport default Checkbox","import React, {useEffect, useRef} from \"react\"\nimport Foco from 'react-foco'\nimport Checkbox from './Checkbox'\n// import OutsideClickHandler from \"./OutsideClickHandler\";\n\nfunction TodoItem(props) {\n    const inputRef = useRef()\n    const itemStyle = props.data.completed ? \"completed-item\" : \"todo-item\"\n\n    useEffect(() => {\n        if (inputRef && inputRef.current && props.data.edit === true) {\n          inputRef.current.focus();\n        }\n      }, [props.data.edit]);\n\n    return (\n        <div className={itemStyle}>\n            <Checkbox \n                checked={props.data.completed}\n                handleChange = {props.handleChange}\n                id = {props.data.id} />\n                <p \n                    onClick={()=> props.handleEditTask(props.data.id)} \n                    hidden={props.data.edit}>{props.data.text}</p>\n                <Foco className={props.data.edit ? '' : 'hidden'} onClickOutside={(e)=>{props.onOutsideClick(e, props.data.id)}}>\n                <input\n                    ref={inputRef}\n                    type='text'\n                    id={props.data.aid}\n                    hidden={!props.data.edit} \n                    className='update-task'\n                    value={props.data.text}\n                    placeholder='what do you want to do?'\n                    onChange={(e) => props.handleUpdate(e, props.data.id)}\n                    onKeyDown={(e) => props.saveTask(e, props.data)} />\n                </Foco>\n            <button \n                onClick={() => props.handleClick(props.data.id)}\n            >X</button>\n        </div>\n\n    )\n}\n \nexport default TodoItem","import React, { useState } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem'\n\nfunction App() {\n  const origTodos = JSON.parse(localStorage.getItem('todos'))\n  const [ todos, setTodos ] = useState(origTodos ? origTodos : [])\n  const [ lastTaskId, setLastTaskId ] = useState(todos.length > 0 ? todos.at(-1).id : 0)\n  const [ newTask, setNewTask ] = useState()\n  const todoList = todos.map(todo => \n    <TodoItem \n      key={todo.id} \n      data={todo} \n      handleChange={handleChange} \n      handleClick={removeTask}\n      handleEditTask={editTask}\n      handleUpdate={updateTask}\n      saveTask={saveTask}\n      onOutsideClick={clickOutsideTask}\n    />)\n\n  function updateTaskState(condition, outputOnTrue, outputOnFalse) {\n    setTodos(prevTodos => {\n      const updateTodos = prevTodos.map(todo => {\n        if (todo.id === condition) {\n          return {\n            ...todo,\n            ...outputOnTrue\n          }\n        } else {\n          return {\n            ...todo,\n            ...outputOnFalse\n          }\n        }\n      })\n      localStorage.setItem('todos', JSON.stringify(updateTodos))\n      return updateTodos\n    })\n  }\n  \n  function removeTask(id) {\n    setTodos(prevTodos => {\n      const newTodos = prevTodos.filter(todo => todo.id !== id)\n      localStorage.setItem('todos', JSON.stringify(newTodos))\n      return newTodos\n    })\n  }\n\n  function editTask(id) { updateTaskState(id, {edit:true}, {edit:false}) }\n  \n  function clickOutsideTask(e, id) { \n    console.log(id)\n    updateTaskState(id, {edit:false}, {}) \n  }\n\n  function updateTask(event, id) { updateTaskState(id, {text: event.target.value}, {}) }\n\n  function updateNewTask(event) {setNewTask(event.target.value)}\n\n  function handleChange(id) { \n    setTodos(prevTodos => {\n      const updateTodos = prevTodos.map(todo => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed : !todo.completed\n            }\n          } else { return todo }\n      })\n      localStorage.setItem('todos', JSON.stringify(updateTodos))\n      return updateTodos\n    })\n  }\n\n  function addNewTask(event) {\n    const nextId = lastTaskId + 1\n    if (event.key === 'Enter') {\n      setTodos(prevTodos => {\n        const newTodo = {\n          id : nextId,\n          text : event.target.value,\n          completed : false,\n          edit : false\n        }\n        setLastTaskId(nextId)\n        const newTodos = [...prevTodos, newTodo]\n        localStorage.setItem('todos', JSON.stringify(newTodos))\n        return newTodos\n        }\n      )\n      setNewTask('')\n    }\n  }\n\n  function saveTask(event, task) {\n    if (event.key === 'Backspace' && !task.text) {\n      removeTask(task.id)\n    }\n    if (event.key === 'Enter') {\n      updateTaskState(\n        task.id, \n        { text: event.target.value,\n          edit: false },\n        {}\n        )\n        localStorage.setItem('todos', JSON.stringify(todos))\n    }\n  }\n\n    return (\n      <div className=\"todo-list\">\n        <h1 className=\"App-header\">Todo List</h1>\n        {todoList}\n        <input \n          className='new-task'\n          type='text'\n          value={newTask || ''}\n          placeholder='what do you want to do?'\n          onChange={updateNewTask}\n          onKeyPress={addNewTask}\n          /> \n      </div>\n      )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}