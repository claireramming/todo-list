{"version":3,"sources":["components/Checkbox.js","components/TodoItem.js","App.js","reportWebVitals.js","index.js"],"names":["Checkbox","props","className","type","checked","onChange","handleChange","id","xmlns","viewBox","aria-hidden","focusable","fill","stroke","strokeWidth","d","TodoItem","itemStyle","data","completed","aid","value","text","e","handleUpdate","onKeyDown","saveTask","onClick","removeTask","App","origTodos","JSON","parse","localStorage","getItem","todos","setTodos","useState","lastTaskId","setLastTaskId","length","at","newTask","setNewTask","focusRef","useRef","useEffect","current","focus","todoList","map","todo","updateTaskState","prevTodos","updateTodos","target","setItem","stringify","newTodos","filter","event","task","key","ref","placeholder","nextId","newTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7d84f09.chunk.js","sourcesContent":["import React from 'react'\n\n// creates a link that looks like a button\n// when clicked, it will open a new tab\n// props must contain a url (href) and the button text (text)\n\nfunction Checkbox(props) {\n    return (\n        <span className=\"checkbox__input\">\n            <input type=\"checkbox\" \n                checked={props.checked}\n                onChange = {() => props.handleChange(props.id)} />\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                aria-hidden=\"true\"\n                focusable=\"false\"\n            >\n                <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"3\"\n                d=\"M1.73 12.91l6.37 6.37L22.79 4.59\"\n                />\n            </svg>\n        </span>\n    )\n}\n\nexport default Checkbox","import React from \"react\"\nimport Checkbox from './Checkbox'\n\nfunction TodoItem(props) {\n    const itemStyle = props.data.completed ? \"completed-item\" : \"todo-item\"\n\n    return (\n        <div className={itemStyle}>\n            <Checkbox \n                checked={props.data.completed}\n                handleChange = {props.handleChange}\n                id = {props.data.id} />\n                <input\n                    type='text'\n                    id={props.data.aid} \n                    className='update-task'\n                    value={props.data.text}\n                    onChange={(e) => props.handleUpdate(e, props.data.id)}\n                    onKeyDown={(e) => props.saveTask(e, props.data)} />\n            <button \n                onClick={() => props.removeTask(props.data.id)}\n            >X</button>\n        </div>\n\n    )\n}\n \nexport default TodoItem","import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport TodoItem from './components/TodoItem'\n\nfunction App() {\n  const origTodos = JSON.parse(localStorage.getItem('todos'))\n  const [ todos, setTodos ] = useState(origTodos ? origTodos : [])\n  const [ lastTaskId, setLastTaskId ] = useState(todos.length > 0 ? todos.at(-1).id : 0)\n  const [ newTask, setNewTask ] = useState()\n\n  const focusRef = useRef(null)\n\n  useEffect(()=>{focusRef.current.focus()}, [])\n\n  const todoList = todos.map(todo => \n    <TodoItem \n      key={todo.id} \n      data={todo} \n      handleChange={handleChange} \n      removeTask={removeTask}\n      handleUpdate={updateTaskState}\n      saveTask={saveTask}\n    />)\n\n  function updateTaskState(e, id) {\n    setTodos(prevTodos => {\n      const updateTodos = prevTodos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            text: e.target.value\n          }\n        } else {\n          return todo\n        }\n      })\n      localStorage.setItem('todos', JSON.stringify(updateTodos))\n      return updateTodos\n    })\n  }\n  \n  function removeTask(id) {\n    setTodos(prevTodos => {\n      const newTodos = prevTodos.filter(todo => todo.id !== id)\n      localStorage.setItem('todos', JSON.stringify(newTodos))\n      return newTodos\n    })\n  }\n\n  function updateNewTask(event) {setNewTask(event.target.value)}\n\n  function handleChange(id) { \n    setTodos(prevTodos => {\n      const updateTodos = prevTodos.map(todo => {\n          if (todo.id === id) {\n            return {\n              ...todo,\n              completed : !todo.completed\n            }\n          } else { return todo }\n      })\n      localStorage.setItem('todos', JSON.stringify(updateTodos))\n      return updateTodos\n    })\n  }\n\n  function addNewTask(event) {\n    const nextId = lastTaskId + 1\n    if (event.key === 'Enter') {\n      setTodos(prevTodos => {\n        const newTodo = {\n          id : nextId,\n          text : event.target.value,\n          completed : false\n        }\n        setLastTaskId(nextId)\n        const newTodos = [...prevTodos, newTodo]\n        localStorage.setItem('todos', JSON.stringify(newTodos))\n        return newTodos\n        }\n      )\n      setNewTask('')\n    }\n  }\n\n  function saveTask(event, task) {\n    if (event.key === 'Backspace' && !task.text) {\n      removeTask(task.id)\n    }\n    if (event.key === 'Enter') {\n        focusRef.current.focus()\n    }\n  }\n\n    return (\n      <div className=\"todo-list\">\n        <h1 className=\"App-header\">Todo List</h1>\n        {todoList}\n        <input \n          ref={focusRef}\n          className='new-task'\n          type='text'\n          value={newTask || ''}\n          placeholder='what do you want to do?'\n          onChange={updateNewTask}\n          onKeyDown={addNewTask}\n          /> \n      </div>\n      )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}